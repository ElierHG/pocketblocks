import { apps, auth, folders, settings } from "@/api";
import { mocker } from "@/mocker";
import { Application, Folder, Settings, FullUser } from "@/types";
import {
  authRoute,
  createAppList,
  createDefaultErrorResponse,
  createDefaultResponse,
  createFolderList,
  getAuthConfigs,
} from "@/utils";

const createResponseData = async (
  user: FullUser,
  systemSettings: Settings,
  folders: Folder[],
  apps: Application[],
) => {
  return {
    user: {
      id: user.id,
      createdBy: "anonymousId",
      name: user.name !== "NONAME" ? user.name : "Change Me",
      avatar: null,
      tpAvatarLink: null,
      state: "ACTIVATED",
      isEnabled: true,
      isAnonymous: false,
      connections: [
        {
          authId: "EMAIL",
          source: "EMAIL",
          name: user.name !== "NONAME" ? user.name : "Change Me",
          avatar: null,
          rawUserInfo: {
            email: user.email,
          },
          tokens: [],
        },
      ],
      hasSetNickname: true,
      orgTransformedUserInfo: null,
    },
    organization: {
      id: "ORG_ID",
      createdBy: "anonymousId",
      name: systemSettings.org_name,
      isAutoGeneratedOrganization: true,
      contactName: null,
      contactEmail: null,
      contactPhoneNumber: null,
      source: null,
      thirdPartyCompanyId: null,
      state: "ACTIVE",
      commonSettings: {
        themeList: systemSettings.themes,
        defaultHomePage: systemSettings.home_page,
        defaultTheme: systemSettings.theme,
        preloadCSS: systemSettings.css,
        preloadJavaScript: systemSettings.script,
        preloadLibs: systemSettings.libs,
      },
      logoUrl: systemSettings.logo,
      createTime: 0,
      authConfigs: await getAuthConfigs(),
    },
    folderInfoViews: await createFolderList(folders),
    homeApplicationViews: await createAppList(apps),
  };
};

export default [
  mocker.get(
    "/api/v1/applications/home",
    authRoute(async () => {
      const userResponse = await auth.getCurrentUser();
      const appsResponse = await apps.list();
      const foldersResponse = await folders.list();
      const settingsResponse = await settings.get();
      if (
        userResponse.data &&
        appsResponse.data &&
        foldersResponse.data &&
        settingsResponse.data
      ) {
        return createDefaultResponse(
          await createResponseData(
            userResponse.data,
            settingsResponse.data,
            foldersResponse.data,
            appsResponse.data,
          ),
        );
      }
      return createDefaultErrorResponse([
        userResponse,
        appsResponse,
        foldersResponse,
        settingsResponse,
      ]);
    }),
  ),
];
